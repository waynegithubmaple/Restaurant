'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="restaurant")>  _
Partial Public Class restaurantDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertSeat(instance As Seat)
    End Sub
  Partial Private Sub UpdateSeat(instance As Seat)
    End Sub
  Partial Private Sub DeleteSeat(instance As Seat)
    End Sub
  Partial Private Sub InsertOrder(instance As [Order])
    End Sub
  Partial Private Sub UpdateOrder(instance As [Order])
    End Sub
  Partial Private Sub DeleteOrder(instance As [Order])
    End Sub
  Partial Private Sub InsertMenu(instance As Menu)
    End Sub
  Partial Private Sub UpdateMenu(instance As Menu)
    End Sub
  Partial Private Sub DeleteMenu(instance As Menu)
    End Sub
  Partial Private Sub InsertOrderItem(instance As OrderItem)
    End Sub
  Partial Private Sub UpdateOrderItem(instance As OrderItem)
    End Sub
  Partial Private Sub DeleteOrderItem(instance As OrderItem)
    End Sub
  Partial Private Sub InsertPromotion(instance As Promotion)
    End Sub
  Partial Private Sub UpdatePromotion(instance As Promotion)
    End Sub
  Partial Private Sub DeletePromotion(instance As Promotion)
    End Sub
  Partial Private Sub InsertFoodlog(instance As Foodlog)
    End Sub
  Partial Private Sub UpdateFoodlog(instance As Foodlog)
    End Sub
  Partial Private Sub DeleteFoodlog(instance As Foodlog)
    End Sub
  Partial Private Sub InsertStaff2(instance As Staff2)
    End Sub
  Partial Private Sub UpdateStaff2(instance As Staff2)
    End Sub
  Partial Private Sub DeleteStaff2(instance As Staff2)
    End Sub
  Partial Private Sub InsertReservation(instance As Reservation)
    End Sub
  Partial Private Sub UpdateReservation(instance As Reservation)
    End Sub
  Partial Private Sub DeleteReservation(instance As Reservation)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.VP_Assignment_2.My.MySettings.Default.restaurantConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Seats() As System.Data.Linq.Table(Of Seat)
		Get
			Return Me.GetTable(Of Seat)
		End Get
	End Property
	
	Public ReadOnly Property Orders() As System.Data.Linq.Table(Of [Order])
		Get
			Return Me.GetTable(Of [Order])
		End Get
	End Property
	
	Public ReadOnly Property Menus() As System.Data.Linq.Table(Of Menu)
		Get
			Return Me.GetTable(Of Menu)
		End Get
	End Property
	
	Public ReadOnly Property OrderItems() As System.Data.Linq.Table(Of OrderItem)
		Get
			Return Me.GetTable(Of OrderItem)
		End Get
	End Property
	
	Public ReadOnly Property Promotions() As System.Data.Linq.Table(Of Promotion)
		Get
			Return Me.GetTable(Of Promotion)
		End Get
	End Property
	
	Public ReadOnly Property Foodlogs() As System.Data.Linq.Table(Of Foodlog)
		Get
			Return Me.GetTable(Of Foodlog)
		End Get
	End Property
	
	Public ReadOnly Property Staff2s() As System.Data.Linq.Table(Of Staff2)
		Get
			Return Me.GetTable(Of Staff2)
		End Get
	End Property
	
	Public ReadOnly Property Reservations() As System.Data.Linq.Table(Of Reservation)
		Get
			Return Me.GetTable(Of Reservation)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Seat")>  _
Partial Public Class Seat
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TableNo As Integer
	
	Private _TableStatus As String
	
	Private _OrderItems As EntitySet(Of OrderItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTableNoChanging(value As Integer)
    End Sub
    Partial Private Sub OnTableNoChanged()
    End Sub
    Partial Private Sub OnTableStatusChanging(value As String)
    End Sub
    Partial Private Sub OnTableStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderItems = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItems, AddressOf Me.detach_OrderItems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TableNo", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TableNo() As Integer
		Get
			Return Me._TableNo
		End Get
		Set
			If ((Me._TableNo = value)  _
						= false) Then
				Me.OnTableNoChanging(value)
				Me.SendPropertyChanging
				Me._TableNo = value
				Me.SendPropertyChanged("TableNo")
				Me.OnTableNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TableStatus", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property TableStatus() As String
		Get
			Return Me._TableStatus
		End Get
		Set
			If (String.Equals(Me._TableStatus, value) = false) Then
				Me.OnTableStatusChanging(value)
				Me.SendPropertyChanging
				Me._TableStatus = value
				Me.SendPropertyChanged("TableStatus")
				Me.OnTableStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Seat_OrderItem", Storage:="_OrderItems", ThisKey:="TableNo", OtherKey:="tableNo")>  _
	Public Property OrderItems() As EntitySet(Of OrderItem)
		Get
			Return Me._OrderItems
		End Get
		Set
			Me._OrderItems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.Seat = Me
	End Sub
	
	Private Sub detach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.Seat = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Order]")>  _
Partial Public Class [Order]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrderNo As Integer
	
	Private _OrderDate As Date
	
	Private _OrderStatus As String
	
	Private _OrderItems As EntitySet(Of OrderItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderNoChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderNoChanged()
    End Sub
    Partial Private Sub OnOrderDateChanging(value As Date)
    End Sub
    Partial Private Sub OnOrderDateChanged()
    End Sub
    Partial Private Sub OnOrderStatusChanging(value As String)
    End Sub
    Partial Private Sub OnOrderStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderItems = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItems, AddressOf Me.detach_OrderItems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderNo", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property OrderNo() As Integer
		Get
			Return Me._OrderNo
		End Get
		Set
			If ((Me._OrderNo = value)  _
						= false) Then
				Me.OnOrderNoChanging(value)
				Me.SendPropertyChanging
				Me._OrderNo = value
				Me.SendPropertyChanged("OrderNo")
				Me.OnOrderNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="Date NOT NULL")>  _
	Public Property OrderDate() As Date
		Get
			Return Me._OrderDate
		End Get
		Set
			If ((Me._OrderDate = value)  _
						= false) Then
				Me.OnOrderDateChanging(value)
				Me.SendPropertyChanging
				Me._OrderDate = value
				Me.SendPropertyChanged("OrderDate")
				Me.OnOrderDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderStatus", DbType:="VarChar(20)")>  _
	Public Property OrderStatus() As String
		Get
			Return Me._OrderStatus
		End Get
		Set
			If (String.Equals(Me._OrderStatus, value) = false) Then
				Me.OnOrderStatusChanging(value)
				Me.SendPropertyChanging
				Me._OrderStatus = value
				Me.SendPropertyChanged("OrderStatus")
				Me.OnOrderStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_OrderItem", Storage:="_OrderItems", ThisKey:="OrderNo", OtherKey:="OrderNo")>  _
	Public Property OrderItems() As EntitySet(Of OrderItem)
		Get
			Return Me._OrderItems
		End Get
		Set
			Me._OrderItems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.[Order] = Me
	End Sub
	
	Private Sub detach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.[Order] = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Menu")>  _
Partial Public Class Menu
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ItemId As String
	
	Private _ItemName As String
	
	Private _ItemPrice As Integer
	
	Private _ItemCategory As String
	
	Private _Status As String
	
	Private _OrderItems As EntitySet(Of OrderItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnItemIdChanging(value As String)
    End Sub
    Partial Private Sub OnItemIdChanged()
    End Sub
    Partial Private Sub OnItemNameChanging(value As String)
    End Sub
    Partial Private Sub OnItemNameChanged()
    End Sub
    Partial Private Sub OnItemPriceChanging(value As Integer)
    End Sub
    Partial Private Sub OnItemPriceChanged()
    End Sub
    Partial Private Sub OnItemCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnItemCategoryChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderItems = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItems, AddressOf Me.detach_OrderItems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemId", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ItemId() As String
		Get
			Return Me._ItemId
		End Get
		Set
			If (String.Equals(Me._ItemId, value) = false) Then
				Me.OnItemIdChanging(value)
				Me.SendPropertyChanging
				Me._ItemId = value
				Me.SendPropertyChanged("ItemId")
				Me.OnItemIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me.OnItemNameChanging(value)
				Me.SendPropertyChanging
				Me._ItemName = value
				Me.SendPropertyChanged("ItemName")
				Me.OnItemNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemPrice", DbType:="Int NOT NULL")>  _
	Public Property ItemPrice() As Integer
		Get
			Return Me._ItemPrice
		End Get
		Set
			If ((Me._ItemPrice = value)  _
						= false) Then
				Me.OnItemPriceChanging(value)
				Me.SendPropertyChanging
				Me._ItemPrice = value
				Me.SendPropertyChanged("ItemPrice")
				Me.OnItemPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemCategory", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ItemCategory() As String
		Get
			Return Me._ItemCategory
		End Get
		Set
			If (String.Equals(Me._ItemCategory, value) = false) Then
				Me.OnItemCategoryChanging(value)
				Me.SendPropertyChanging
				Me._ItemCategory = value
				Me.SendPropertyChanged("ItemCategory")
				Me.OnItemCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Menu_OrderItem", Storage:="_OrderItems", ThisKey:="ItemId", OtherKey:="ItemId")>  _
	Public Property OrderItems() As EntitySet(Of OrderItem)
		Get
			Return Me._OrderItems
		End Get
		Set
			Me._OrderItems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.Menu = Me
	End Sub
	
	Private Sub detach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.Menu = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrderItems")>  _
Partial Public Class OrderItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrderNo As Integer
	
	Private _ItemId As String
	
	Private _quantity As Integer
	
	Private _ItemName As String
	
	Private _ItemPrice As Integer
	
	Private _tableNo As Integer
	
	Private _entry As Integer
	
	Private _Seat As EntityRef(Of Seat)
	
	Private _Menu As EntityRef(Of Menu)
	
	Private _Order As EntityRef(Of [Order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderNoChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderNoChanged()
    End Sub
    Partial Private Sub OnItemIdChanging(value As String)
    End Sub
    Partial Private Sub OnItemIdChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Integer)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub OnItemNameChanging(value As String)
    End Sub
    Partial Private Sub OnItemNameChanged()
    End Sub
    Partial Private Sub OnItemPriceChanging(value As Integer)
    End Sub
    Partial Private Sub OnItemPriceChanged()
    End Sub
    Partial Private Sub OntableNoChanging(value As Integer)
    End Sub
    Partial Private Sub OntableNoChanged()
    End Sub
    Partial Private Sub OnentryChanging(value As Integer)
    End Sub
    Partial Private Sub OnentryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Seat = CType(Nothing, EntityRef(Of Seat))
		Me._Menu = CType(Nothing, EntityRef(Of Menu))
		Me._Order = CType(Nothing, EntityRef(Of [Order]))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderNo", DbType:="Int NOT NULL")>  _
	Public Property OrderNo() As Integer
		Get
			Return Me._OrderNo
		End Get
		Set
			If ((Me._OrderNo = value)  _
						= false) Then
				If Me._Order.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOrderNoChanging(value)
				Me.SendPropertyChanging
				Me._OrderNo = value
				Me.SendPropertyChanged("OrderNo")
				Me.OnOrderNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemId", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property ItemId() As String
		Get
			Return Me._ItemId
		End Get
		Set
			If (String.Equals(Me._ItemId, value) = false) Then
				If Me._Menu.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnItemIdChanging(value)
				Me.SendPropertyChanging
				Me._ItemId = value
				Me.SendPropertyChanged("ItemId")
				Me.OnItemIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Int NOT NULL")>  _
	Public Property quantity() As Integer
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ItemName() As String
		Get
			Return Me._ItemName
		End Get
		Set
			If (String.Equals(Me._ItemName, value) = false) Then
				Me.OnItemNameChanging(value)
				Me.SendPropertyChanging
				Me._ItemName = value
				Me.SendPropertyChanged("ItemName")
				Me.OnItemNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemPrice", DbType:="Int NOT NULL")>  _
	Public Property ItemPrice() As Integer
		Get
			Return Me._ItemPrice
		End Get
		Set
			If ((Me._ItemPrice = value)  _
						= false) Then
				Me.OnItemPriceChanging(value)
				Me.SendPropertyChanging
				Me._ItemPrice = value
				Me.SendPropertyChanged("ItemPrice")
				Me.OnItemPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tableNo", DbType:="Int NOT NULL")>  _
	Public Property tableNo() As Integer
		Get
			Return Me._tableNo
		End Get
		Set
			If ((Me._tableNo = value)  _
						= false) Then
				If Me._Seat.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OntableNoChanging(value)
				Me.SendPropertyChanging
				Me._tableNo = value
				Me.SendPropertyChanged("tableNo")
				Me.OntableNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_entry", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property entry() As Integer
		Get
			Return Me._entry
		End Get
		Set
			If ((Me._entry = value)  _
						= false) Then
				Me.OnentryChanging(value)
				Me.SendPropertyChanging
				Me._entry = value
				Me.SendPropertyChanged("entry")
				Me.OnentryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Seat_OrderItem", Storage:="_Seat", ThisKey:="tableNo", OtherKey:="TableNo", IsForeignKey:=true)>  _
	Public Property Seat() As Seat
		Get
			Return Me._Seat.Entity
		End Get
		Set
			Dim previousValue As Seat = Me._Seat.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Seat.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Seat.Entity = Nothing
					previousValue.OrderItems.Remove(Me)
				End If
				Me._Seat.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderItems.Add(Me)
					Me._tableNo = value.TableNo
				Else
					Me._tableNo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Seat")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Menu_OrderItem", Storage:="_Menu", ThisKey:="ItemId", OtherKey:="ItemId", IsForeignKey:=true)>  _
	Public Property Menu() As Menu
		Get
			Return Me._Menu.Entity
		End Get
		Set
			Dim previousValue As Menu = Me._Menu.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Menu.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Menu.Entity = Nothing
					previousValue.OrderItems.Remove(Me)
				End If
				Me._Menu.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderItems.Add(Me)
					Me._ItemId = value.ItemId
				Else
					Me._ItemId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Menu")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_OrderItem", Storage:="_Order", ThisKey:="OrderNo", OtherKey:="OrderNo", IsForeignKey:=true)>  _
	Public Property [Order]() As [Order]
		Get
			Return Me._Order.Entity
		End Get
		Set
			Dim previousValue As [Order] = Me._Order.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Order.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Order.Entity = Nothing
					previousValue.OrderItems.Remove(Me)
				End If
				Me._Order.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderItems.Add(Me)
					Me._OrderNo = value.OrderNo
				Else
					Me._OrderNo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("[Order]")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Promotion")>  _
Partial Public Class Promotion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _promoCode As String
	
	Private _Name As String
	
	Private _discountType As String
	
	Private _active As String
	
	Private _discountAmount As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpromoCodeChanging(value As String)
    End Sub
    Partial Private Sub OnpromoCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OndiscountTypeChanging(value As String)
    End Sub
    Partial Private Sub OndiscountTypeChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As String)
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    Partial Private Sub OndiscountAmountChanging(value As String)
    End Sub
    Partial Private Sub OndiscountAmountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_promoCode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property promoCode() As String
		Get
			Return Me._promoCode
		End Get
		Set
			If (String.Equals(Me._promoCode, value) = false) Then
				Me.OnpromoCodeChanging(value)
				Me.SendPropertyChanging
				Me._promoCode = value
				Me.SendPropertyChanged("promoCode")
				Me.OnpromoCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discountType", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property discountType() As String
		Get
			Return Me._discountType
		End Get
		Set
			If (String.Equals(Me._discountType, value) = false) Then
				Me.OndiscountTypeChanging(value)
				Me.SendPropertyChanging
				Me._discountType = value
				Me.SendPropertyChanged("discountType")
				Me.OndiscountTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="NVarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property active() As String
		Get
			Return Me._active
		End Get
		Set
			If (String.Equals(Me._active, value) = false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discountAmount", DbType:="NVarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property discountAmount() As String
		Get
			Return Me._discountAmount
		End Get
		Set
			If (String.Equals(Me._discountAmount, value) = false) Then
				Me.OndiscountAmountChanging(value)
				Me.SendPropertyChanging
				Me._discountAmount = value
				Me.SendPropertyChanged("discountAmount")
				Me.OndiscountAmountChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Foodlog")>  _
Partial Public Class Foodlog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As String
	
	Private _ActivityType As String
	
	Private _Day As String
	
	Private _Month As String
	
	Private _Year As String
	
	Private _Time As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnActivityTypeChanging(value As String)
    End Sub
    Partial Private Sub OnActivityTypeChanged()
    End Sub
    Partial Private Sub OnDayChanging(value As String)
    End Sub
    Partial Private Sub OnDayChanged()
    End Sub
    Partial Private Sub OnMonthChanging(value As String)
    End Sub
    Partial Private Sub OnMonthChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As String)
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    Partial Private Sub OnTimeChanging(value As String)
    End Sub
    Partial Private Sub OnTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivityType", DbType:="VarChar(30)")>  _
	Public Property ActivityType() As String
		Get
			Return Me._ActivityType
		End Get
		Set
			If (String.Equals(Me._ActivityType, value) = false) Then
				Me.OnActivityTypeChanging(value)
				Me.SendPropertyChanging
				Me._ActivityType = value
				Me.SendPropertyChanged("ActivityType")
				Me.OnActivityTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Day", DbType:="VarChar(10)")>  _
	Public Property Day() As String
		Get
			Return Me._Day
		End Get
		Set
			If (String.Equals(Me._Day, value) = false) Then
				Me.OnDayChanging(value)
				Me.SendPropertyChanging
				Me._Day = value
				Me.SendPropertyChanged("Day")
				Me.OnDayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Month", DbType:="VarChar(10)")>  _
	Public Property Month() As String
		Get
			Return Me._Month
		End Get
		Set
			If (String.Equals(Me._Month, value) = false) Then
				Me.OnMonthChanging(value)
				Me.SendPropertyChanging
				Me._Month = value
				Me.SendPropertyChanged("Month")
				Me.OnMonthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="VarChar(10)")>  _
	Public Property Year() As String
		Get
			Return Me._Year
		End Get
		Set
			If (String.Equals(Me._Year, value) = false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Time", DbType:="VarChar(20)")>  _
	Public Property Time() As String
		Get
			Return Me._Time
		End Get
		Set
			If (String.Equals(Me._Time, value) = false) Then
				Me.OnTimeChanging(value)
				Me.SendPropertyChanging
				Me._Time = value
				Me.SendPropertyChanged("Time")
				Me.OnTimeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Staff2")>  _
Partial Public Class Staff2
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As String
	
	Private _Name As String
	
	Private _IC As String
	
	Private _Gender As String
	
	Private _Contact As String
	
	Private _Email As String
	
	Private _Address As String
	
	Private _Password As String
	
	Private _Position As String
	
	Private _Status As String
	
	Private _Reason As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As String)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnICChanging(value As String)
    End Sub
    Partial Private Sub OnICChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnContactChanging(value As String)
    End Sub
    Partial Private Sub OnContactChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnPositionChanging(value As String)
    End Sub
    Partial Private Sub OnPositionChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnReasonChanging(value As String)
    End Sub
    Partial Private Sub OnReasonChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="VarChar(30) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Id() As String
		Get
			Return Me._Id
		End Get
		Set
			If (String.Equals(Me._Id, value) = false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IC", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property IC() As String
		Get
			Return Me._IC
		End Get
		Set
			If (String.Equals(Me._IC, value) = false) Then
				Me.OnICChanging(value)
				Me.SendPropertyChanging
				Me._IC = value
				Me.SendPropertyChanged("IC")
				Me.OnICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contact", DbType:="VarChar(11) NOT NULL", CanBeNull:=false)>  _
	Public Property Contact() As String
		Get
			Return Me._Contact
		End Get
		Set
			If (String.Equals(Me._Contact, value) = false) Then
				Me.OnContactChanging(value)
				Me.SendPropertyChanging
				Me._Contact = value
				Me.SendPropertyChanged("Contact")
				Me.OnContactChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Position", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Position() As String
		Get
			Return Me._Position
		End Get
		Set
			If (String.Equals(Me._Position, value) = false) Then
				Me.OnPositionChanging(value)
				Me.SendPropertyChanging
				Me._Position = value
				Me.SendPropertyChanged("Position")
				Me.OnPositionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reason", DbType:="VarChar(100)")>  _
	Public Property Reason() As String
		Get
			Return Me._Reason
		End Get
		Set
			If (String.Equals(Me._Reason, value) = false) Then
				Me.OnReasonChanging(value)
				Me.SendPropertyChanging
				Me._Reason = value
				Me.SendPropertyChanged("Reason")
				Me.OnReasonChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Reservation")>  _
Partial Public Class Reservation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Reservation_ID As String
	
	Private _Customer_Name As String
	
	Private _Reservation_DateTime_Start As System.Nullable(Of Date)
	
	Private _Reservation_DateTime_End_ As System.Nullable(Of Date)
	
	Private _Number_of_People As System.Nullable(Of Integer)
	
	Private _Contact_Number As String
	
	Private _Status As String
	
	Private _Staff_ID As String
	
	Private _Table_No As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnReservation_IDChanging(value As String)
    End Sub
    Partial Private Sub OnReservation_IDChanged()
    End Sub
    Partial Private Sub OnCustomer_NameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomer_NameChanged()
    End Sub
    Partial Private Sub OnReservation_DateTime_StartChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReservation_DateTime_StartChanged()
    End Sub
    Partial Private Sub OnReservation_DateTime_End_Changing(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReservation_DateTime_End_Changed()
    End Sub
    Partial Private Sub OnNumber_of_PeopleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumber_of_PeopleChanged()
    End Sub
    Partial Private Sub OnContact_NumberChanging(value As String)
    End Sub
    Partial Private Sub OnContact_NumberChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnStaff_IDChanging(value As String)
    End Sub
    Partial Private Sub OnStaff_IDChanged()
    End Sub
    Partial Private Sub OnTable_NoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTable_NoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Reservation ID]", Storage:="_Reservation_ID", DbType:="VarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Reservation_ID() As String
		Get
			Return Me._Reservation_ID
		End Get
		Set
			If (String.Equals(Me._Reservation_ID, value) = false) Then
				Me.OnReservation_IDChanging(value)
				Me.SendPropertyChanging
				Me._Reservation_ID = value
				Me.SendPropertyChanged("Reservation_ID")
				Me.OnReservation_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Customer Name]", Storage:="_Customer_Name", DbType:="VarChar(30)")>  _
	Public Property Customer_Name() As String
		Get
			Return Me._Customer_Name
		End Get
		Set
			If (String.Equals(Me._Customer_Name, value) = false) Then
				Me.OnCustomer_NameChanging(value)
				Me.SendPropertyChanging
				Me._Customer_Name = value
				Me.SendPropertyChanged("Customer_Name")
				Me.OnCustomer_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Reservation DateTime Start]", Storage:="_Reservation_DateTime_Start", DbType:="DateTime2")>  _
	Public Property Reservation_DateTime_Start() As System.Nullable(Of Date)
		Get
			Return Me._Reservation_DateTime_Start
		End Get
		Set
			If (Me._Reservation_DateTime_Start.Equals(value) = false) Then
				Me.OnReservation_DateTime_StartChanging(value)
				Me.SendPropertyChanging
				Me._Reservation_DateTime_Start = value
				Me.SendPropertyChanged("Reservation_DateTime_Start")
				Me.OnReservation_DateTime_StartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Reservation DateTime End ]", Storage:="_Reservation_DateTime_End_", DbType:="DateTime2")>  _
	Public Property Reservation_DateTime_End_() As System.Nullable(Of Date)
		Get
			Return Me._Reservation_DateTime_End_
		End Get
		Set
			If (Me._Reservation_DateTime_End_.Equals(value) = false) Then
				Me.OnReservation_DateTime_End_Changing(value)
				Me.SendPropertyChanging
				Me._Reservation_DateTime_End_ = value
				Me.SendPropertyChanged("Reservation_DateTime_End_")
				Me.OnReservation_DateTime_End_Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Number of People]", Storage:="_Number_of_People", DbType:="Int")>  _
	Public Property Number_of_People() As System.Nullable(Of Integer)
		Get
			Return Me._Number_of_People
		End Get
		Set
			If (Me._Number_of_People.Equals(value) = false) Then
				Me.OnNumber_of_PeopleChanging(value)
				Me.SendPropertyChanging
				Me._Number_of_People = value
				Me.SendPropertyChanged("Number_of_People")
				Me.OnNumber_of_PeopleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Contact Number]", Storage:="_Contact_Number", DbType:="VarChar(50)")>  _
	Public Property Contact_Number() As String
		Get
			Return Me._Contact_Number
		End Get
		Set
			If (String.Equals(Me._Contact_Number, value) = false) Then
				Me.OnContact_NumberChanging(value)
				Me.SendPropertyChanging
				Me._Contact_Number = value
				Me.SendPropertyChanged("Contact_Number")
				Me.OnContact_NumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(6)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Staff ID]", Storage:="_Staff_ID", DbType:="VarChar(5)")>  _
	Public Property Staff_ID() As String
		Get
			Return Me._Staff_ID
		End Get
		Set
			If (String.Equals(Me._Staff_ID, value) = false) Then
				Me.OnStaff_IDChanging(value)
				Me.SendPropertyChanging
				Me._Staff_ID = value
				Me.SendPropertyChanged("Staff_ID")
				Me.OnStaff_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Table No]", Storage:="_Table_No", DbType:="Int")>  _
	Public Property Table_No() As System.Nullable(Of Integer)
		Get
			Return Me._Table_No
		End Get
		Set
			If (Me._Table_No.Equals(value) = false) Then
				Me.OnTable_NoChanging(value)
				Me.SendPropertyChanging
				Me._Table_No = value
				Me.SendPropertyChanged("Table_No")
				Me.OnTable_NoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
